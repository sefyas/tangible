<launch>
  <!-- Kinect -->
  <arg name="camera" default="head_mount_kinect" />
  <arg name="scene_output_frame" default="/base_footprint" />
  
  <arg name="mode_change_topic" default="tpbd_mode" />

  <arg name="scene_service_name" default="get_scene" />
  <arg name="scene_information_service" default="get_scene" />   <!-- redundant -->
  
  <arg name="block_service_name" default="get_blocks" />
  
  <arg name="program_service_name" default="get_program" />
  <arg name="program_acquisition_service" default="get_program" /> <!-- redundant -->
  
  <arg name="grasp_service_name" default="get_grasps" />
  <arg name="grasp_acquisition_service" default="get_grasps" /> <!-- redundant -->
  
  <arg name="release_service_name" default="get_releases" />
  <arg name="release_acquisition_service" default="get_releases" /> <!-- redundant -->
  
  <arg name="object_matching_service_name" default="match_objects" />
  <arg name="check_criteria_service" default="match_objects" /> <!-- redundant -->

  <arg name="arm_movement_service" default="move_arm" />
  <arg name="arm_movement_control_service" default="control_arm" />  
  
  <arg name="point_location_threshold" default="0.02" />
  <arg name="box_dimension_threshold" default="0.02" />
  <arg name="cloud_topic" default="$(arg camera)/depth_registered/points" />
  <arg name="idle_id" default="0"/>
  <arg name="run_id" default="1" />
  <arg name="edit_id" default="2"/>

  <!-- Turn on the Kinect -->
  <include file="$(find freenect_launch)/launch/freenect.launch">
    <arg name="depth_registration" value="true"/>
    <arg name="camera" value="$(arg camera)"/>
    <arg name="depth_frame_id" value="head_mount_kinect_ir_optical_frame" />
    <arg name="publish_tf" value="false"/>
  </include>

  <!-- MoveIt -->
  <include file="$(find tangible_programming)/launch/move_group.launch" />

  <!-- TF Frames -->
  <!-- I don't think we need this if using with real robot -->
  <!-- <include file="$(find tangible_programming)/launch/userdefined_frame.launch" >
    <arg name="camera" value="$(arg camera)" />
  </include> --> 

  <!-- AR Tracking -->
  <!-- Changes for real robot -->
  <include file="$(find ar_track_alvar)/launch/pr2_indiv.launch" >
    <arg name="output_frame" default="$(arg scene_output_frame)" />
    <arg name="cam_image_topic" default="$(arg cloud_topic)" />
    <arg name="cam_info_topic" default="$(arg camera)/rgb/camera_info" />
  </include>

  <!-- Object Processing -->
  <node pkg="tangible_programming" type="object_processing_node" name="object_processing_node">
    <param name="output_frame" type="string" value="$(arg scene_output_frame)" />
    <param name="scene_service_name" type="string" value="$(arg scene_service_name)" />
    <param name="cloud_topic" type="string" value="$(arg cloud_topic)" />
  </node>

  <!-- Block Parsing -->
  <node pkg="tangible_programming" type="block_parsing_node" name="block_parsing_node">
    <param name="mode_change_topic" type="string" value="$(arg mode_change_topic)" />
    <param name="block_service_name" type="string" value="$(arg block_service_name)" />
    <param name="run_id" type="int" value="$(arg run_id)" />
    <param name="edit_id" type="int" value="$(arg edit_id)" />
    <param name="idle_id" type="int" value="$(arg idle_id)" />
  </node> 

  <!-- Compiler -->
  <node pkg="tangible_programming" type="compiler_node" name="compiler_node">
    <param name="mode_change_topic" type="string" value="$(arg mode_change_topic)" />
    <param name="block_service_name" type="string" value="$(arg block_service_name)" />
    <param name="scene_service_name" type="string" value="$(arg scene_service_name)" />
    <param name="program_service_name" type="string" value="$(arg program_service_name)" />
    <param name="run_id" type="int" value="$(arg run_id)" />
    <param name="edit_id" type="int" value="$(arg edit_id)" />
    <param name="idle_id" type="int" value="$(arg idle_id)" />
  </node>

  <!-- Execution -->
  <node pkg="tangible_programming" type="program_execution_node" name="program_execution_node">
    <param name="system_mode_topic" type="string" value="$(arg mode_change_topic)" />
    <param name="program_acquisition_service" type="string" value="$(arg program_service_name)" />
    <param name="scene_information_service" type="string" value="$(arg scene_service_name)" />
    <param name="check_criteria_service" type="string" value="$(arg match_objects)" />
    <param name="grasp_acquisition_service" type="string" value="$(arg grasp_service_name)" />
    <param name="release_acquisition_service" type="string" value="$(arg release_service_name)" />
    <param name="arm_movement_service" type="string" value="$(arg arm_movement_service)" />
    <param name="arm_movement_control_service" type="string" value="$(arg arm_movement_control_service)" />
  </node>  

  <!-- Object Matching -->
  <node pkg="tangible_programming" type="object_matching_node" name="object_matching_node">
    <param name="object_matching_service_name" type="string" value="$(arg object_matching_service_name)"/>
    <param name="point_location_threshold" type="double" value="$(arg point_location_threshold)"/>
    <param name="box_dimension_threshold" type="double" value="$(arg box_dimension_threshold)"/>
  </node>

  <!-- Grasp Generation -->
  <node pkg="tangible_programming" type="grasp_generator_node" name="grasp_generator_node">
    <param name="grasp_service_name" type="string" value="$(arg grasp_service_name)" />
  </node>

  <!-- Release Generation -->
  <node pkg="tangible_programming" type="release_generator_node" name="release_generator_node">
    <param name="release_service_name" type="string" value="$(arg release_service_name)" />
  </node>

  <!-- Arm Motion -->
 <node pkg="tangible_programming" type="arm_motion_node" name="arm_motion_node"> 
    <param name="arm_movement_service" type="string" value="$(arg arm_movement_service)" />
    <param name="arm_movement_control_service" type="string" value="$(arg arm_movement_control_service)" />
  </node> 

  <!-- Static TF Node -->
  <node pkg="tangible_programming" type="static_tf.py" name="static_tf" />

  <!-- RViz -->
  <!-- If we want to use an rviz config, we need to add it to the package and launch with frontend -->
  <!-- <node pkg="rviz" type="rviz" name="visualization" args="-d /home/yasaman/.rviz/visualization.rviz"/> -->

</launch>
